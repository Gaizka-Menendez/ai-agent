services: # docker compose expects
  backend: # custom key name
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports: 
      - 8080:8000
    # --reload se asegura de que se actualicen los cambios de python en ejecución si los hubiere, pero es mejor usar restart en develop
    command: uvicorn main:app --host 0.0.0.0 --port 8000 # --reload

    environment:
      - PORT=8000
      - MY_PROJECT=Hello World

    env_file:
      - .env

    # los volumenes no se preocupan de los .dockerignore y te muestran todos los archivos aunque esten dentro del ignore
    # volumes:
    #   - ./backend/src:/app
    # develop nos ayuda a que si algo cambia dentro de nuestro backend, por ejemplo requirements.txt que ejecute rebuild con cada cambio una vez guardado
    develop:
      watch:
        - action: rebuild
          path: backend/requirements.txt
        - action: rebuild
          path: backend/Dockerfile 
          # en lugar de usar volumnenes se puede usar sync aqui para guardar las cosas pero solo sirve para archivos ya existentes
        - action: restart
          path: backend/src
          # target: /app
    depends_on:
      db_service:
        condition: service_healthy


  # DATABASE_URL=postgres+psycopg://username:password@dbhost:dbport/dbname
  db_service:
    image: postgres:latest
    ports:
      - 5432:5432
    environment:
      - POSTGRES_USER=dbuser
      - POSTGRES_PASSWORD=db-password
      - POSTGRES_DB=mydb
    volumes: 
      - dc_managed_db_volume:/var/lib/postgresql/data
    healthcheck:
    # docker pregunta si la BBDD esta lista con (pg_isready), -U dbuser usuarion con el que prueba y -d mydb base de datos a la que conectarse, si no funciona Exit 1
      test: ["CMD-SHELL", "pg_isready -U dbuser -d mydb || exit 1"]
      interval: 2s
      timeout: 2s
      retries: 15
      start_period: 5s

  # static_html: # custom key name
  #   build:
  #     context: ./static_html
  #     dockerfile: static.Dockerfile
  #   ports: 
  #     # - 8000:8000
  #     # - 3000:8000
  #     - 8081:8000
  #   command: python -m http.server 8000
  #   volumes:
  #     - ./static_html/src:/app

# el problema de indicar los parametros de la conexión a la DB en producción aqui en el compose es que no se encarga de la persintencia
# de los managed_volumes y tendriamos que realizar docker compose dowm -v
volumes:
  dc_managed_db_volume:
  